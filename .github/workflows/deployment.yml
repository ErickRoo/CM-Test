# Deployment
#
# This Github Workflow builds and deploys the Greenlight Gatsby sites
# under the `sites/` directory when a new commit is pushed to the
# `main` or `sandbox` branches. This workflow can also be triggered
# manually via the GitHub Actions tab on GitHub.
# see https://github.com/timedotcom/greenlight/actions

name: Deployment 🚀

on:
  # Manually run the workflow when triggered via the Actions tab on GitHub
  # see https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:
    inputs:
      site:
        type: choice
        description: Site to deploy
        required: true
        options:
          - time-studios
          - your-hot-job
          - time-media-kit
          - afghan-women
      contentful_environment:
        type: string
        description: Contentful Environment (or Environment Alias) to build from. Defaults to `master`.
        default: 'master'
        required: true

  # Run on every commit push, but only for the branches
  # `main`(PROD) and `sandbox`(DEV)
  push:
    branches:
      - main
      - sandbox

    paths:
      # This action will only run when changes to this file are pushed
      - 'sites/**'

  # Repository Dispatch acts as GitHub Actions’s way of interfacing with webhooks.
  # For this repo, we want to deploy whenever a site is published in Contentful.
  repository_dispatch:
    types: [contentful.deploy]

# Top-level environment variables
env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  DEV_AWS_S3_BUCKET: 'tusallc-test-time-tfk-greenlight-dev'
  PROD_AWS_S3_BUCKET: 'tusallc-prod-time-greenlight-prod'
  DEV_BASE_URL: 'https://dev.time.com'
  PROD_BASE_URL: 'https://time.com'
  DEV_TFK_BASE_URL: 'https://dev.timeforkids.com'
  PROD_TFK_BASE_URL: 'https://timeforkids.com'
  PROD_TFK_AWS_S3_BUCKET: 'tusallc-prod-tfk-greenlight-prod'

jobs:
  # The `pre-deploy` job builds and run tests before deploying
  pre-deploy:
    name: Pre-Deploy
    uses: ./.github/workflows/node.yml
    secrets:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  deploy:
    name: Deploy 🚀
    runs-on: ubuntu-latest
    needs: pre-deploy # this jobs needs the `install` job above to finish
    steps:
      # Checkout the repo
      # https://github.com/actions/checkout
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      # See https://github.com/actions/setup-node
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install npm dependencies 📦
        run: npm ci

      - name: Determine the Gatsby site to deploy
        uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.ref }}
          filters: |
            time-studios:
              - 'sites/time-studios/**'
            your-hot-job:
              - 'sites/your-lit-job/**'
            time-media-kit:
              - 'sites/time-media-kit/**'
            afghan-women:
              - 'sites/afghan-women/**'

      - name: Set Site Environment Variables
        run: |
          if [[ ("${{ github.event_name }}" == "push" && "${{ steps.changes.outputs.time-studios }}" == "true") || \
             ("${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.site }}" == "time-studios") || \
             ("${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.client_payload.site }}" == "time-studios") ]];
          then
            echo "SITE_PROJECT=time-studios" >> $GITHUB_ENV
            echo "SITE_ROUTE=/studios" >> $GITHUB_ENV
            echo "CONTENTFUL_ACCESS_TOKEN=${{ secrets.STUDIOS_CONTENTFUL_ACCESS_TOKEN }}" >> $GITHUB_ENV
          elif [[ ("${{ github.event_name }}" == "push" && "${{ steps.changes.outputs.your-hot-job }}" == "true") || \
             ("${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.site }}" == "your-hot-job") || \
             ("${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.client_payload.site }}" == "your-hot-job") ]];
          then
            echo "SITE_PROJECT=your-lit-job" >> $GITHUB_ENV
            echo "SITE_ROUTE=/your-hot-job" >> $GITHUB_ENV
            echo "CONTENTFUL_ACCESS_TOKEN=${{ secrets.YLJ_CONTENTFUL_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "YHJ=true" >> $GITHUB_ENV
          elif [[ ("${{ github.event_name }}" == "push" && "${{ steps.changes.outputs.time-media-kit }}" == "true") || \
             ("${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.site }}" == "time-media-kit") || \
             ("${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.client_payload.site }}" == "time-media-kit") ]];
          then
            echo "SITE_PROJECT=time-media-kit" >> $GITHUB_ENV
            echo "SITE_ROUTE=/mediakit" >> $GITHUB_ENV
            echo "CONTENTFUL_ACCESS_TOKEN=${{ secrets.MEDIAKIT_CONTENTFUL_ACCESS_TOKEN }}" >> $GITHUB_ENV
          elif [[ ("${{ github.event_name }}" == "push" && "${{ steps.changes.outputs.afghan-women }}" == "true") || \
             ("${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.site }}" == "afghan-women") ]];
          then
            echo "SITE_PROJECT=afghan-women" >> $GITHUB_ENV
            echo "SITE_ROUTE=/afghan-women-kabul-fall-anniversary" >> $GITHUB_ENV
          fi

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]
          then
            echo "CONTENTFUL_ENVIRONMENT=${{ github.event.inputs.contentful_environment }}" >> $GITHUB_ENV
          else
            echo "CONTENTFUL_ENVIRONMENT=master" >> $GITHUB_ENV
          fi

      - name: Set App & AWS Environment Variables
        run: |
          if [ "${{ github.ref_name == 'sandbox' }}" == "true" ]
          then
            echo "APP_ENV=development" >> $GITHUB_ENV
            echo "AWS_S3_BUCKET=${{ env.DEV_AWS_S3_BUCKET }}" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.GH_WORKFLOW_DEV_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.GH_WORKFLOW_DEV_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

            if [ "${{ env.YHJ == 'true' }}" == "true" ]
            then
              echo "APP_ENV_URL=${{ env.DEV_TFK_BASE_URL }}${{ env.SITE_ROUTE }}" >> $GITHUB_ENV
              echo "AWS_CLOUDFRONT_ID=${{ secrets.DEV_TFK_AWS_CLOUDFRONT_ID }}" >> $GITHUB_ENV
              echo "CONTENTFUL_ENVIRONMENT=stage" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_API_KEY=${{ secrets.YHJ_DEV_FIREBASE_API_KEY }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_AUTH_DOMAIN=${{ secrets.YHJ_DEV_FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_PROJECT_ID=${{ secrets.YHJ_DEV_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_STORAGE_BUCKET=${{ secrets.YHJ_DEV_FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.YHJ_DEV_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_APP_ID=${{ secrets.YHJ_DEV_FIREBASE_APP_ID }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_DATABASE_URL=${{ secrets.YHJ_DEV_FIREBASE_DATABASE_URL }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_LYTICS_TAG_SRC=${{ secrets.YHJ_DEV_LYTICS_TAG_SRC }}" >> $GITHUB_ENV
            else
              echo "APP_ENV_URL=${{ env.DEV_BASE_URL }}${{ env.SITE_ROUTE }}" >> $GITHUB_ENV
              echo "AWS_CLOUDFRONT_ID=${{ secrets.DEV_AWS_CLOUDFRONT_ID }}" >> $GITHUB_ENV
            fi
          elif [[ ("${{ github.ref_name == 'main' }}" == "true" ) || \
             ("${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.action }}" == "contentful.deploy") ]];
          then
            echo "APP_ENV=production" >> $GITHUB_ENV
            echo "CONTENTFUL_ENVIRONMENT=master" >> $GITHUB_ENV

            if [ "${{ env.YHJ == 'true' }}" == "true" ]
            then
              echo "APP_ENV_URL=${{ env.PROD_TFK_BASE_URL }}${{ env.SITE_ROUTE }}" >> $GITHUB_ENV
              echo "AWS_CLOUDFRONT_ID=${{ secrets.PROD_TFK_AWS_CLOUDFRONT_ID }}" >> $GITHUB_ENV
              echo "AWS_S3_BUCKET=${{ env.PROD_TFK_AWS_S3_BUCKET }}" >> $GITHUB_ENV
              echo "AWS_ACCESS_KEY_ID=${{ secrets.GH_WORKFLOW_PROD_TFK_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.GH_WORKFLOW_PROD_TFK_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_API_KEY=${{ secrets.YHJ_PROD_FIREBASE_API_KEY }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_AUTH_DOMAIN=${{ secrets.YHJ_PROD_FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_PROJECT_ID=${{ secrets.YHJ_PROD_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_STORAGE_BUCKET=${{ secrets.YHJ_PROD_FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.YHJ_PROD_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_APP_ID=${{ secrets.YHJ_PROD_FIREBASE_APP_ID }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_FIREBASE_DATABASE_URL=${{ secrets.YHJ_PROD_FIREBASE_DATABASE_URL }}" >> $GITHUB_ENV
              echo "GATSBY_YLJ_LYTICS_TAG_SRC=${{ secrets.YHJ_PROD_LYTICS_TAG_SRC }}" >> $GITHUB_ENV
            else
              echo "APP_ENV_URL=${{ env.PROD_BASE_URL }}${{ env.SITE_ROUTE }}" >> $GITHUB_ENV
              echo "AWS_S3_BUCKET=${{ env.PROD_AWS_S3_BUCKET }}" >> $GITHUB_ENV
              echo "AWS_CLOUDFRONT_ID=${{ secrets.PROD_AWS_CLOUDFRONT_ID }}" >> $GITHUB_ENV
              echo "AWS_ACCESS_KEY_ID=${{ secrets.GH_WORKFLOW_PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.GH_WORKFLOW_PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            fi
          fi

      # Create a new deployment via Github's API,
      # which will tie this workflow to the deployment
      # and allow other integrated tools to be "aware"
      # of the deployment.
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: ${{ github.token }}
          target_url: ${{ env.APP_ENV_URL }}
          environment: ${{ env.APP_ENV }}
          initial_status: 'in_progress'
          description: '${{ env.APP_ENV }} Deployment'

      # Deployment to S3 bucket via `deploy` npm script
      - name: Deploy Gatsby site 🚀
        run: |
          echo "Deploying to ${{ env.APP_ENV }}"
          npm run deploy --site=${{ env.SITE_PROJECT }}

      # Cloudfront cache invalidation
      # The AWS CLI is already available in GitHub's hosted virtual environments
      - name: Invalidate Cloudfront Cache
        run: |
          echo "Invalidating Cloudfront cache for: ${{ env.AWS_CLOUDFRONT_ID }}"
          aws cloudfront create-invalidation --distribution-id ${{ env.AWS_CLOUDFRONT_ID }} --paths '${{ env.SITE_ROUTE }}*'

      - name: Update deployment status (success) ✔️
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          target_url: ${{ env.APP_ENV_URL }}
          environment_url: ${{ env.APP_ENV_URL }}
          state: 'success'
          description: '${{ env.APP_ENV }} Deployment'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure) ❌
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          target_url: ${{ env.APP_ENV_URL }}
          environment_url: ${{ env.APP_ENV_URL }}
          state: 'failure'
          description: '${{ env.APP_ENV }} Deployment'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
